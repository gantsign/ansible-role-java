---
# Load version specific values
- name: load JDK version vars
  with_first_found:
    - '../vars/jdk-versions/{{ java_version }}.yml'
    - ../vars/jdk-versions/default.yml
  include_vars: '{{ item }}'

- name: load JCE version vars
  with_first_found:
    - '../vars/jce-versions/{{ java_major_version }}.yml'
    - ../vars/jce-versions/default.yml
  include_vars: '{{ item }}'

- name: assert version vars
  assert:
    that:
      - java_redis_sha256sum not in (None, '')
      - java_version_build not in (None, '')
      - java_jce_redis_sha256sum not in (None, '')
      - java_jce_redis_mirror not in (None, '')
      - java_jce_redis_filename not in (None, '')
      - java_jce_redis_folder not in (None, '')

- name: assert Binary Code License accepted
  assert:
    that:
      - java_license_declaration == 'I accept the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX" under the terms at http://www.oracle.com/technetwork/java/javase/terms/license/index.html'

# Create download directory
- name: create download directory
  file:
    state: directory
    mode: 'u=rwx,go=rx'
    dest: '{{ java_download_dir }}'

- name: check for JDK on local box
  local_action: stat path='{{ java_local_archive_dir }}/{{ java_jdk_redis_filename }}'
  register: local_JDK_file
  ignore_errors: yes
  when: java_use_local_archive

- name: copy JDK from local box
  become: yes
  copy:
    src: '{{ java_local_archive_dir }}/{{ java_jdk_redis_filename }}'
    dest: '{{ java_download_dir }}/{{ java_jdk_redis_filename }}'
    mode: 'u=rw,go=r'
  when: java_use_local_archive and local_JDK_file.stat.exists

- name: check for JDK on remote box
  stat:
    path: '{{ java_download_dir }}/{{ java_jdk_redis_filename }}'
    checksum_algorithm: sha256
  register: remote_JDK_file
  ignore_errors: yes

- name: assert existing JDK matches checksum
  assert:
    that:
      - remote_JDK_file.stat.checksum == java_redis_sha256sum
    msg: 'Checksum failed: {{ remote_JDK_file.stat.checksum }} != {{ java_redis_sha256sum }}'
  when: remote_JDK_file.stat.exists

# Ensure CA certificates installed (so we can download the JDK)
- name: ensure ca-certificates installed (apt)
  become: yes
  apt:
    name: ca-certificates
    state: present
  when: ansible_pkg_mgr == 'apt'

# Download install files
- name: download JDK
  get_url:
    url: '{{ java_jdk_redis_mirror }}/{{ java_jdk_redis_filename }}'
    headers: 'Cookie:oraclelicense=accept-securebackup-cookie'
    dest: '{{ java_download_dir }}/{{ java_jdk_redis_filename }}'
    sha256sum: '{{ java_redis_sha256sum }}'
    force: no
    use_proxy: yes
    validate_certs: yes
    timeout: '{{ java_jdk_download_timeout_seconds }}'
    mode: 'u=rw,go=r'
  when: not remote_JDK_file.stat.exists

- name: check for JCE on local box
  local_action: stat path='{{ java_local_archive_dir }}/{{ java_jce_redis_filename }}'
  register: local_JCE_file
  ignore_errors: yes
  when: java_use_local_archive

- name: copy JCE from local box
  become: yes
  copy:
    src: '{{ java_local_archive_dir }}/{{ java_jce_redis_filename }}'
    dest: '{{ java_download_dir }}/{{ java_jce_redis_filename }}'
    mode: 'u=rw,go=r'
  when: java_use_local_archive and local_JCE_file.stat.exists

- name: check for JCE on remote box
  stat:
    path: '{{ java_download_dir }}/{{ java_jce_redis_filename }}'
    checksum_algorithm: sha256
  register: remote_JCE_file
  ignore_errors: yes

- name: assert existing JCE matches checksum
  assert:
    that:
      - remote_JCE_file.stat.checksum == java_jce_redis_sha256sum
    msg: 'Checksum failed: {{ remote_JCE_file.stat.checksum }} != {{ java_jce_redis_sha256sum }}'
  when: remote_JCE_file.stat.exists

- name: download JCE
  get_url:
    url: '{{ java_jce_redis_mirror }}/{{ java_jce_redis_filename }}'
    headers: 'Cookie:oraclelicense=accept-securebackup-cookie'
    dest: '{{ java_download_dir }}/{{ java_jce_redis_filename }}'
    sha256sum: '{{ java_jce_redis_sha256sum }}'
    force: no
    use_proxy: yes
    validate_certs: yes
    timeout: '{{ java_jce_download_timeout_seconds }}'
    mode: 'u=rw,go=r'
  when: not remote_JCE_file.stat.exists

# Unpack installation
- name: create Java home directory
  become: yes
  file:
    path: '{{ java_home }}'
    state: directory
    owner: root
    group: root
    mode: 'u=rwx,go=rx'

- name: install unarchive module dependencies (apt, yum, dnf, zypper)
  become: yes
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - tar
    - unzip
  when: ansible_pkg_mgr in ('apt', 'yum', 'dnf', 'zypper')

- name: install JDK
  become: yes
  unarchive:
    src: '{{ java_download_dir }}/{{ java_jdk_redis_filename }}'
    dest: '{{ java_install_dir }}'
    creates: '{{ java_home }}/bin/java'
    copy: no
    owner: root
    group: root
    mode: 'go-w'

- name: unzip JCE
  unarchive:
    src: '{{ java_download_dir }}/{{ java_jce_redis_filename }}'
    dest: '{{ java_download_dir }}'
    creates: '{{ java_download_dir }}/{{ java_jce_redis_folder }}/local_policy.jar'
    copy: no

- name: install local_policy.jar
  become: yes
  copy:
    src: '{{ java_download_dir }}/{{ java_jce_redis_folder }}/local_policy.jar'
    remote_src: yes
    dest: '{{ java_home }}/jre/lib/security/local_policy.jar'
    owner: root
    group: root
    mode: 'u=rw,go=r'

- name: install US_export_policy.jar
  become: yes
  copy:
    src: '{{ java_download_dir }}/{{ java_jce_redis_folder }}/US_export_policy.jar'
    remote_src: yes
    dest: '{{ java_home }}/jre/lib/security/US_export_policy.jar'
    owner: root
    group: root
    mode: 'u=rw,go=r'

- include: write-environment-config.yml
  when: java_is_default_installation

# Set Java facts
- name: create Ansible facts.d directory
  become: yes
  file:
    state: directory
    dest: /etc/ansible/facts.d
    owner: root
    group: root
    mode: 'u=rwx,go=rx'

- name: install Java facts
  become: yes
  template:
    src: facts.j2
    dest: '/etc/ansible/facts.d/{{ java_fact_group_name }}.fact'
    owner: root
    group: root
    mode: 'u=rw,go=r'

- name: re-read facts
  setup:
    filter: ansible_local
